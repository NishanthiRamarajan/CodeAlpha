package CodeAlpha;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

class Grade {
    private String subject;
    private double score;

    public Grade(String subject, double score) {
        this.subject = subject;
        this.score = score;
    }

    public String getSubject() {
        return subject;
    }

    public double getScore() {
        return score;
    }
}

class Student {
    private String name;
    private int id;
    private List<Grade> grades;

    public Student(String name, int id) {
        this.name = name;
        this.id = id;
        this.grades = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    public List<Grade> getGrades() {
        return grades;
    }

    public void addGrade(String subject, double score) {
        Grade grade = new Grade(subject, score);
        grades.add(grade);
    }

    public double calculateAverageGrade() {
        double totalScore = 0;
        for (Grade grade : grades) {
            totalScore += grade.getScore();
        }
        return grades.isEmpty() ? 0 : totalScore / grades.size();
    }

    public double findLowestGrade() {
        if (grades.isEmpty()) {
            return 0;
        }
        double lowest = grades.get(0).getScore();
        for (Grade grade : grades) {
            lowest = Math.min(lowest, grade.getScore());
        }
        return lowest;
    }

    public double findHighestGrade() {
        if (grades.isEmpty()) {
            return 0;
        }
        double highest = grades.get(0).getScore();
        for (Grade grade : grades) {
            highest = Math.max(highest, grade.getScore());
        }
        return highest;
    }
}

public class GradeTracker {
    private Map<Integer, Student> students;

    public GradeTracker() {
        this.students = new HashMap<>();
    }

    public void addStudent(String name, int id) {
        Student student = new Student(name, id);
        students.put(id, student);
    }

    public void addGrade(int studentId, String subject, double score) {
        if (students.containsKey(studentId)) {
            students.get(studentId).addGrade(subject, score);
        } else {
            System.out.println("Student with ID " + studentId + " not found.");
        }
    }

    public void displayStudentInfo(int studentId) {
        if (students.containsKey(studentId)) {
            Student student = students.get(studentId);
            System.out.println("Student ID: " + student.getId());
            System.out.println("Student Name: " + student.getName());
            System.out.println("Grades :");
            for (Grade grade : student.getGrades()) {
                System.out.println(grade.getSubject() + ": " + grade.getScore());
            }
            System.out.println("Average Grade: " + student.calculateAverageGrade());
            System.out.println("Lowest Grade: " + student.findLowestGrade());
            System.out.println("Highest Grade: " + student.findHighestGrade());
        } else {
            System.out.println("Student with ID " + studentId + " not found.");
        }
    }

    public static void main(String[] args) {
        GradeTracker gradeTracker = new GradeTracker();
        gradeTracker.addStudent("John Doe", 1);
        gradeTracker.addStudent("Jane Smith", 2);

        gradeTracker.addGrade(1, "Math", 90.5);
        gradeTracker.addGrade(1, "English", 85.0);
        gradeTracker.addGrade(1, "Science", 88.0);
        gradeTracker.addGrade(1, "History", 75.5);
        gradeTracker.addGrade(2, "Math", 78.5);
        gradeTracker.addGrade(2, "English", 92.0);
        gradeTracker.addGrade(2, "Science", 95.5);
        gradeTracker.addGrade(2, "History", 80.0);

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter student ID to display information: ");
        int studentId = scanner.nextInt();
        gradeTracker.displayStudentInfo(studentId);
        scanner.close();
    }
}
